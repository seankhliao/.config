#!/usr/bin/env zsh

eval $(dircolors $XDG_CONFIG_HOME/dircolors)

setopt AUTOCD
setopt COMPLETE_IN_WORD
setopt LIST_PACKED
setopt EXTENDED_GLOB
setopt GLOB_DOTS
setopt EXTENDED_HISTORY
setopt HIST_FCNTL_LOCK
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_LEX_WORDS
setopt HIST_NO_FUNCTIONS
setopt HIST_NO_STORE
setopt HIST_REDUCE_BLANKS
setopt HIST_SAVE_NO_DUPS
setopt SHARE_HISTORY
setopt IGNORE_EOF
setopt INTERACTIVE_COMMENTS
setopt PIPE_FAIL
setopt NO_PROMPT_BANG
setopt NO_PROMPT_CR
setopt PROMPT_SUBST
setopt PROMPT_PERCENT

autoload -Uz add-zsh-hook
autoload -Uz compinit bashcompinit
autoload -Uz edit-command-line
autoload -Uz url-quote-magic

zmodload zsh/datetime
zmodload zsh/stat
zmodload zsh/zpty

zle -N self-insert url-quote-magic
zle -N _sudo_cmdline
zle -N history-substring-search-up
zle -N history-substring-search-down

function _sudo_cmdline() {
    [[ -z $BUFFER ]] && zle up-history
    LBUFFER="sudo $LBUFFER"
    [[ $BUFFER == sudo\ * ]] && LBUFFER="${LBUFFER#sudo sudo }"
}

bindkey -e
bindkey "\e\e" _sudo_cmdline
bindkey '^[[A' history-substring-search-up
bindkey '\eOA' history-substring-search-up
bindkey '^[[B' history-substring-search-down
bindkey '\eOB' history-substring-search-down
bindkey '^[[H' beginning-of-line
bindkey '^[[F' end-of-line

zstyle ':completion:*' group-name ''
zstyle ':completion:*' gain-privileges true
zstyle ':completion:*' list-colors "${(@s.:.)LS_COLORS}"
zstyle ':completion:*' matcher-list '' \
    '+m:{a-z}={A-Z}' '+m:{A-Z}={a-z}' \
    'r:[^[:alpha:]]||[[:alpha:]]=** r:|=* m:{a-z\-}={A-Z\_}' \
    'r:|?=** m:{a-z\-}={A-Z\_}'
zstyle ':completion:*' menu select
zstyle ':completion:*' rehash true

compinit -D

source ${ZDOTDIR}/prompt.zsh
source ${ZDOTDIR}/zsh-autosuggestions.zsh
source ${ZDOTDIR}/zsh-syntax-highlighting.zsh
source ${ZDOTDIR}/zsh-history-substring-search.zsh

source "${ZDOTDIR}"/_kubectl &>/dev/null || true
source /opt/google-cloud-sdk/completion.zsh.inc &>/dev/null || true
source ~/keys/zsh &>/dev/null || true

export PROMPT_EOL_MARK=''
export VIRTUAL_ENV_DISABLE_PROMPT=1

add-zsh-hook precmd  _precmd
add-zsh-hook preexec _preexec

alias -s go='go run'
alias -s py='python'; [[ -f /usr/bin/python3 ]] && alias -s py='python3'

function _auto_git_aliases() {
    [[ -f $XDG_CONFIG_HOME/git/config ]] || return
    local start_alias=false
    while read line; do
        if ! $start_alias; then
            [[ $line =~ '\s*\[alias\]' ]] && start_alias=true
        else
            [[ $line =~ '\s*\[[a-z]*\]' ]] && break
            sub=${${line%%=*}// /}
            [[ $sub ]] && alias g${sub}="git ${sub}"
        fi
    done < $XDG_CONFIG_HOME/git/config
}
_auto_git_aliases

alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'
alias .......='cd ../../../../../..'

alias cp='cp -v'
alias diff='diff --color=always'
alias grep='grep --color=auto';  [[ -f /usr/bin/rg ]]   && alias grep='rg -N -S -p'
alias gr='grep --color=auto';    [[ -f /usr/bin/rg ]]   && alias gr='rg -S -p'
alias l='ls -lh --color=auto';   [[ -f /usr/bin/exa ]]  && alias l='exa -l --git --time-style iso'
alias ll='ls -alh --color=auto'; [[ -f /usr/bin/exa ]]  && alias ll='exa -l -a --git --time-style iso'
alias ln='ln -v'
alias ls='ls --color'
alias mv='mv -v'
alias sudo='sudo -E'

alias cicd='gcloud builds log --stream $(gcloud builds list --filter=tags="$(git rev-parse HEAD)" --limit=1 --format="value(id)")'
alias cr='google-chrome-unstable'
alias ds="df -P -kHl"
alias drun='docker run --rm -it -v $(pwd):/workspace -w /workspace'
alias fs='du -d 1 -h . 2>/dev/null | sort -h -r'
alias g='git'
# (( $+commands[gotip] )) && alias go='gotip'
alias h='htop'
alias p='yay'
alias py='python3'
alias py2='python2'
alias s='ssh'
alias sd='sudo systemctl'
alias sdu='systemctl --user'
alias sne='ssh sne'
alias v='vim'; [[ -f '/usr/bin/nvim' ]] && alias v='nvim'
alias vbare='vim -u NONE'; [[ -f '/usr/bin/nvim' ]] && alias vbare='nvim -u NONE'
alias wgup='sudo wg-quick up wg0'
alias wgdown='sudo wg-quick down wg0'

function gcamp_patch(){
    git commit -a -m "${*}"
    local vers=$(_semver_next patch)
    git push && git push origin "${vers}"
}
function gcamp_minor(){
    git commit -a -m "${*}"
    local vers=$(_semver_next minor)
    git push && git push origin "${vers}"
}
function gcamp_major(){
    git commit -a -m "${*}"
    local vers=$(_semver_next major)
    git push && git push origin "${vers}"
}

function gsall() {
    local bold=$(tput bold)
    local normal=$(tput sgr0)

    for dir in ./*; do
        if [[ -d ${dir} ]] && [[ -d ${dir}/.git ]]; then
            echo "\n${bold}$dir${normal}"
            git -C ${dir} log --oneline origin/master..HEAD
            git -C ${dir} status -s
        fi
    done
}

function md() {
    [[ -z ${1// } ]] && echo "no directory name gived" && return 1
    mkdir -p "$1" && cd "$1"
}

function t() {
    command tag -i "$@"
    source ${TAG_ALIAS_FILE:-/tmp/tag_aliases} 2>/dev/null
}

function mr() {
    set -xo pipefail
    [[ -z ${1// } ]] && echo "no repo name given" && return 1
    mkdir -p $1
    cd $1
    git init
    git commit --allow-empty -m "root-commit"
    git remote add origin s:$1

    cat << EOF > .gitignore
$1
EOF

    cat << EOF > README.md
# $1

A repo for $1

[![License](https://img.shields.io/github/license/seankhliao/$1.svg?style=flat-square)](LICENSE)
![Version](https://img.shields.io/github/v/tag/seankhliao/$1?sort=semver&style=flat-square)
EOF

    cat << EOF > LICENSE
MIT License

Copyright (c) $(date +%Y) Sean Liao

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
EOF
}

function mrgo() {
    [[ -z ${1// } ]] && echo "no repo name given" && return 1
    mr "$@"
    go mod init github.com/seankhliao/$1

    cat << EOF >> README.md
[![Godoc](http://img.shields.io/badge/godoc-reference-blue.svg?style=flat-square)](https://godoc.org/github.com/seankhliao/$1)
EOF

    cat << EOF > cloudbuild.yaml
steps:
  - id: build
    name: gcr.io/cloud-builders/docker:latest
    args:
      - build
      - -t=gcr.io/\$PROJECT_ID/\$_IMG:\$SHORT_SHA
      - -t=gcr.io/\$PROJECT_ID/\$_IMG:latest
      - .
  - id: deploy
    name: gcr.io/cloud-builders/kubectl:latest
    args:
      - set
      - image
      - deploy
      - \$_IMG
      - "*=gcr.io/\$PROJECT_ID/\$_IMG:\$SHORT_SHA"
    env:
      - CLOUDSDK_COMPUTE_ZONE=\$_ZONE
      - CLOUDSDK_CONTAINER_CLUSTER=\$_CLUSTER
images:
  - gcr.io/\$PROJECT_ID/\$_IMG:\$SHORT_SHA
  - gcr.io/\$PROJECT_ID/\$_IMG:latest
substitutions:
  _ZONE: us-central1-a
  _CLUSTER: cluster16
  _IMG: $1
tags:
  - \$COMMIT_SHA
EOF

    cat << EOF > Dockerfile
FROM golang:alpine AS build

ENV CGO_ENABLED=0
WORKDIR /app
RUN apk add --no-cache ca-certificates
COPY . .
RUN go build -mod=vendor -o /bin/app


FROM scratch

COPY --from=build /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt
COPY --from=build /bin/app /

ENTRYPOINT ["/app"]
EOF

    cat << EOF > .dockerignore
.dockerignore
.git/
.github/
.gitignore

cloudbuild.yaml
deploy/
Dockerfile
LICENSE
Makefile
README.md
testdata/
EOF

    cat << EOF > main.go
package main

func main() {
        initLog()
}
EOF

    cat << EOF > log.go
package main

import (
	    "os"

	    "github.com/rs/zerolog"
	    "github.com/rs/zerolog/log"
	    "golang.org/x/crypto/ssh/terminal"
)

func initLog() {
	    logfmt := os.Getenv("LOGFMT")
	    if logfmt != "json" {
		    logfmt = "text"
		    log.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stdout, NoColor: !terminal.IsTerminal(int(os.Stdout.Fd()))})
	    }

	    level, _ := zerolog.ParseLevel(os.Getenv("LOGLVL"))
	    if level == zerolog.NoLevel {
		    level = zerolog.InfoLevel
	    }
	    // log.Info().Str("FMT", logfmt).Str("LVL", level.String()).Msg("log initialized")
	    zerolog.SetGlobalLevel(level)
}
EOF
}

function testrepo() {
    set -xo pipefail
    local vers=$(( $(cat ${XDG_CONFIG_HOME}/testrepo-version)+1))
    local repo=testrepo-${vers}
    mkdir ${HOME}/${repo}
    cd ${HOME}/${repo}
    echo ${vers} > ${XDG_CONFIG_HOME}/testrepo-version
    git init
    git commit --allow-empty -m "root-commit"
    git remote add origin s:${repo}
    go mod init github.com/seankhliao/${repo}
    cat << EOF > main.go
package main

func main() {

}
EOF
}

function blog() {
    local filename="$*"
    cat << EOF >  ${filename// /-}.md
--- title
$(echo $filename | cut -c 12-)
--- description
TODO: describe me
--- main
EOF
}

function encrypt() {
  # local pubkey="ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKnAmz4u5/51kPPsebDCiYTXvuftUORh/TJ4pvN3NvQa"
  local pubkey=age14mg08panez45c6lj2cut2l8nqja0k5vm2vxmv5zvc4ufqgptgy2qcjfmuu
  for f in "$@"; do
    age -r ${pubkey} -o ${f}.age ${f}
  done
}

function decrypt() {
  # local privkey=$HOME/.ssh/id_ed25519
  local privkey=$HOME/keys/age.key
  for f in "$@"; do
    age -d -i ${privkey} -o ${f} ${f%%.age}
  done
}

function sign() {
  local privkey=$HOME/.ssh/id_ed25519
  for f in "$@"; do
    ssh-keygen -Y sign -f ${privkey} -n signed@seankhliao.com ${f}
  done
}

function update() {
    yay -Syu
    sudo gcloud components update
    nvim +PlugUpdate +q +CocUpdateSync +q
}

function verify() {
  local accepted=$HOME/keys/ssh-sign-accepted
  for f in "$@"; do
    ssh-keygen -Y verify -n signed@seankhliao.com -f ${accepted} -I arccy@eevee -s ${f}.sig < ${f}
  done
}

function _colortest () {
    for i in {0..255} ; do
        printf "\x1b[48;5;%sm%3d\e[0m " "$i" "$i"
        if (( i == 15 )) || (( i > 15 )) && (( (i-15) % 6 == 0 )); then
            printf "\n";
        fi
    done
}

function _semver_next() {
    if [[ "$1" != "major" ]] && [[ "$1" != "minor" ]] && [[ "$1" != "patch" ]]; then
        echo "please specify one of: major|minor|patch"
        return 1
    fi
    IFS=$'\n' local tags=($(git tag -l))
    if [ ${#tags[@]} -eq 0 ]; then
        git tag v0.0.1
        return
    fi
    local max=$tags[1]
    for t in $tags; do
        max=$(_semver_gt $max $t)
    done
    local v=$(_semver_bump $max $1)
    git tag $v
    echo $v
}

function _semver_gt() {
    local r="^v(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)(\\-([0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*))?(\\+([0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*))?$"
    if [[ "$1" =~ $r ]]; then
        local v1=(${match[1]} ${match[2]} ${match[3]})
        if [[ "$2" =~ $r ]]; then
            local v2=(${match[1]} ${match[2]} ${match[3]})

            for i in 1 2 3; do
                local vv1=${v1[$i]}
                local vv2=${v2[$i]}
                if (( vv1 > vv2 )); then
                    echo "v${v1[1]}.${v1[2]}.${v1[3]}"
                    return 0
                elif (( vv1 < vv2 )); then
                    echo "v${v2[1]}.${v2[2]}.${v2[3]}"
                    return 0
                fi
            done
            echo "v${v1[1]}.${v1[2]}.${v1[3]}"
            return 0
        fi
    fi
    return 1
}

function _semver_bump() {
    local r="^v(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)(\\-([0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*))?(\\+([0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*))?$"
    if [[ "$1" =~ $r ]]; then
        integer maj=${match[1]}
        integer min=${match[2]}
        integer pat=${match[3]}

        case "$2" in
            major)
                echo "v$(( maj + 1 )).0.0"
            ;;
            minor)
                echo "v${maj}.$(( min +1 )).0"
            ;;
            patch)
                echo "v${maj}.${min}.$(( pat + 1 ))"
            ;;
            *)
            echo "v${maj}.${min}.${pat}"
        esac
        return 0
    fi
    return 1
}
